void swap(int* a, int* b)  
{  
    int t = *a;  
    *a = *b;  
    *b = t;  
}  
  
/* This function takes last element as pivot, places  
the pivot element at its correct position in sorted  
array, and places all smaller (smaller than pivot)  
to left of pivot and all greater elements to right  
of pivot */
int partition (int arr[], int low, int high)  
{  
    int pivot = arr[high]; // pivot  
    int i = (low - 1); // Index of smaller element  
  
    for (int j = low; j <= high - 1; j++)  
    {  
        // If current element is smaller than or  
        // equal to pivot  
        if (arr[j] <= pivot)  
        {  
            i++; // increment index of smaller element  
            swap(&arr[i], &arr[j]);  
        }  
    }  
    swap(&arr[i + 1], &arr[high]);  
    return (i + 1);  
}  
void qs(int arr[],int st,int rt){
//{	static int m=0;
// cout<<m++<<" ";
    if(st<rt)
  {
	// cout<<m++<<" ";	    
    int c=partition(arr,st,rt);
   
    qs(arr,st,c-1);
   //  cout<<m++<<" ";
    qs(arr,c+1,rt);
  //  cout<<m<<" ";
    //m++;
    
    }
        
}

void quickSort(int input[], int size) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Change in the given array itself.
     Taking input and printing output is handled automatically.
  */
 
    qs(input,0,size-1);

}
